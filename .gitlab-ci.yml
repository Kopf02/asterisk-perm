stages:
  - test
  - push

unit-test:
  # to set a possible different behavior of application
  variables:
    NODE_ENV: test
  # test with LTS nodejs
  image: node:14-alpine3.13
  # to run on specific gitlab runner
  tags:
    - tests
    - docker
  stage: test
  retry: 1
  timeout: 5m
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  before_script:
    - npm i
  script:
    - npm test
  artifacts:
    reports:
      junit:
        - test-results.xml
      cobertura:
        - coverage/cobertura-coverage.xml

Push latest:
  image: node:14-alpine3.13
  needs:
    - unit-test
  stage: push

  before_script:
    - "uname -a"
    - "npm config set @jeni:registry=${CI_API_V4_URL}/projects/96/packages/npm/"
    - "npm config set //${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}"
    - "npm config set //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"

  script:
    - npm i
    - npm run build
    - "npm version prerelease --preid branch-$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"
    - "npm publish --tag git-latest-commit"

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  image: node:14-alpine3.13
  needs:
    - unit-test
  before_script:
    - "uname -a"
    - "npm config set @jeni:registry=${CI_API_V4_URL}/projects/96/packages/npm/"
    - "npm config set //${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}"
    - "npm config set //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"
  stage: push
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - npm i
    - npm run build
    - "npm version --no-git-tag-version $CI_COMMIT_TAG"
    - "npm publish --tag latest"
